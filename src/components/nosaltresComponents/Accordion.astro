---
import { Icon } from "astro-icon/components";

interface Props {
    title: string;
    isOpen?: boolean;
}

const { title, isOpen } = Astro.props as Props;
---

<div class="accordion group relative rounded-md border bg-[#fecc59] py-3">
    <button
        class="accordion__button flex w-full flex-1 items-center justify-center gap-2 py-2font-medium transition hover:text-black sm:px-4 text-center relative font-instrument-serif text-3xl"
        type="button"
        id={`${title} accordion menu button`}
        aria-expanded=`${isOpen ? "true" : "false"}`
        aria-controls={`${title} accordion menu content`}
    >
        {title}

        <Icon
            name="tabler:chevron-down"
            aria-hidden="true"
            class="accordion__chevron h-7 w-7 shrink-0 transition-transform absolute right-3"
        />
    </button>

    <div
        id={`${title} accordion menu content`}
        aria-labelledby={`${title} accordion menu button`}
        class="accordion__content hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4"
    >
        <slot />
    </div>
</div>

<script>
    function accordionSetup() {
        const accordionMenus = document.querySelectorAll(
            ".accordion"
        ) as NodeListOf<HTMLElement>;
        accordionMenus.forEach((accordionMenu) => {
            const accordionButton = accordionMenu.querySelector(
                ".accordion__button"
            ) as HTMLElement;
            const accordionChevron = accordionMenu.querySelector(
                ".accordion__chevron"
            ) as HTMLElement;
            const accordionContent = accordionMenu.querySelector(
                ".accordion__content"
            ) as HTMLElement;

            if (accordionButton && accordionContent && accordionChevron) {
                accordionButton.addEventListener("click", (event) => {
                    if (!accordionMenu.classList.contains("active")) {
                        accordionMenu.classList.add("active");
                        accordionButton.setAttribute("aria-expanded", "true");

                        accordionContent.classList.remove("hidden");
                        accordionContent.style.maxHeight =
                            accordionContent.scrollHeight + "px";
                        accordionChevron.classList.add("rotate-180");
                    } else {
                        accordionMenu.classList.remove("active");
                        accordionButton.setAttribute("aria-expanded", "false");

                        accordionContent.style.maxHeight = "0px";
                        accordionChevron.classList.remove("rotate-180");
                        setTimeout(() => {
                            accordionContent.classList.add("hidden");
                        }, 300);
                    }
                    event.preventDefault();
                    return false;
                });
            }
        });
    }

    accordionSetup();

    document.addEventListener("astro:after-swap", accordionSetup);
</script>
